---
title: "Plot all conditions"
author: "Ben Prystawski"
format: html
editor: source
---

# Imports and loading data

```{r imports, message=F}
library(plyr)
library(tidyverse)
library(here)
library(ggthemes)
```

Define constants

```{r constants}
TRAIN_CONDITIONS <- c("fully-observed-held-out", "local-joint-exp", "local-joint-zipf", "wrong-local-joint-exp", "wrong-local-joint-zipf")
GENERATION_CONDITIONS <- c("fixed", "negative_scaffolded", "free", "scaffolded")
NET_IDXS <- c(2, 28, 33, 51, 6, 61, 64, 68, 81, 9)
DVs <- c("true", "marginal")
NUM_SAMPLES <- 10
BASE_MODEL <- "base-lm"
train_condition_strs <- c(
    "fully-observed" = "fully obs. (no held-out)",
    "fully-observed-held-out" = "fully observed",
    "local-joint-exp" = "local (geom)",
    "local-joint-zipf" = "local (zipf)",
    "non-local-zipf" = "non-local (size based on Zipfian)",
    "wrong-local-joint-exp" = "wrong local (geom)",
    "wrong-local-joint-zipf" = "wrong local (zipf)"
)
train_condition_strs_lst <- c(
    "fully observed",
    "local (geom)",
    "local (zipf)",
    "wrong local (geom)",
    "wrong local (zipf)"
)
estimator_strs <- c(
    "fixed" = "direct prediction",
    "negative_scaffolded" = "negative scaffolded",
    "free" = "free generation",
    "scaffolded" = "scaffolded"
)
estimator_strs_lst <- c(
    "direct prediction",
    "negative scaffolded",
    "free generation",
    "scaffolded"
)
```

Read in the data from all conditions

```{r read_and_merge, message=F, echo=F}
df <- data.frame()
df_non_held_out <- data.frame()
for (net_idx in NET_IDXS) {
    df_true <- read_csv(here(sprintf(
        "data/evaluation/true-probs/true-probabilities-net-%s.csv",
        net_idx
    ))) |>
        mutate(type = "true")

    for (train_condition in TRAIN_CONDITIONS) {
        df_fixed <- read_csv(here(sprintf(
            "data/evaluation/base-model-%s/fixed-gen-probabilities-%s-net-%s.csv",
            BASE_MODEL, train_condition, net_idx
        ))) |>
            mutate(type = "fixed")

        df_free <- read_csv(here(sprintf(
            "data/evaluation/base-model-%s/free-gen-probabilities-%s-net-%s-%ssamples.csv",
            BASE_MODEL, train_condition, net_idx, NUM_SAMPLES
        ))) |>
            mutate(type = "free")

        df_scaffolded <- read_csv(here(sprintf(
            "data/evaluation/base-model-%s/scaffolded-gen-probabilities-%s-net-%s-%ssamples.csv",
            BASE_MODEL, train_condition, net_idx, NUM_SAMPLES
        ))) |>
            mutate(type = "scaffolded")

        df_negative_scaffolded <- read_csv(here(sprintf(
            "data/evaluation/base-model-%s/negative-scaffolded-gen-probabilities-%s-net-%s-%ssamples.csv",
            BASE_MODEL, train_condition, net_idx, NUM_SAMPLES
        ))) |>
            mutate(type = "negative_scaffolded")

        df_all_test_conditions <- rbind.fill(df_true, df_fixed, df_free, df_scaffolded, df_negative_scaffolded) |>
            pivot_wider(
                id_cols = c(target_var, condition_var, condition_val),
                names_from = type,
                values_from = prob
            ) |>
            merge(df_true |> select(-c(type, prob)),
                on = c(target_var, condition_var, condition_val)
            ) |>
            mutate(
                net_idx = net_idx,
                train_condition = train_condition
            )

        df_held_out <- df_all_test_conditions |>
            filter(!is.na(scaffolded))

        df_non_held_out_pairs <- read_csv(here(sprintf("data/training-data/non-selected-pairs/non-selected-pairs-net-%s.csv", net_idx)))
        df_non_held_out_1 <- df_fixed |>
            inner_join(df_non_held_out_pairs, by = c("condition_var" = "var1", "target_var" = "var2"))
        df_non_held_out_2 <- df_fixed |>
            inner_join(df_non_held_out_pairs, by = c("condition_var" = "var2", "target_var" = "var1"))
        df_non_held_out_both <- rbind.fill(df_non_held_out_1, df_non_held_out_2) |>
            pivot_wider(
                id_cols = c(target_var, condition_var, condition_val),
                names_from = type,
                values_from = prob
            ) |>
            left_join(df_true |> select(-c(type)),
                by = c("target_var" = "target_var", "condition_var" = "condition_var", "condition_val" = "condition_val")
            ) |>
            mutate(
                net_idx = net_idx,
                train_condition = train_condition
            ) |>
            rename(true = prob)

        df <- rbind(df, df_held_out)
        df_non_held_out <- rbind(df_non_held_out, df_non_held_out_both)
    }
}
```

Compute mean squared error for each combination of training condition and estimator (called generation conditiosn in this codebase)

```{r}
df_mse <- data.frame()
for (train_cond in TRAIN_CONDITIONS) {
    df_cond <- df |>
        filter(train_condition == train_cond)
    for (generation_condition in GENERATION_CONDITIONS) {
        for (dv in DVs) {
            se <- (df_cond[[generation_condition]] - df_cond[[dv]])^2
            df_se_with_ci <- mean_cl_boot(se) |>
                rename(sqE = y, ci_lower = ymin, ci_upper = ymax) |>
                mutate(
                    train_condition = train_cond,
                    generation_condition = generation_condition,
                    dv = dv
                )
            df_mse <- rbind(df_mse, df_se_with_ci)
        }
    }
}

df_mse_agg <- data.frame()
for (train_cond in c("fully observed", "local", "wrong local")) {
    if (train_cond == "fully observed") {
        df_cond <- df |>
            filter(train_condition == "fully-observed")
    } else if (train_cond == "local") {
        df_cond <- df |>
            filter(train_condition == "local-joint-exp" | train_condition == "local-joint-zipf")
    } else {
        df_cond <- df |>
            filter(train_condition == "wrong-local-joint-exp" | train_condition == "wrong-local-joint-zipf")
    }
    for (generation_condition in GENERATION_CONDITIONS) {
        for (dv in DVs) {
            se <- (df_cond[[generation_condition]] - df_cond[[dv]])^2
            df_se_with_ci <- mean_cl_boot(se) |>
                rename(sqE = y, ci_lower = ymin, ci_upper = ymax) |>
                mutate(
                    train_condition = train_cond,
                    generation_condition = generation_condition,
                    dv = dv
                )
            df_mse_agg <- rbind(df_mse_agg, df_se_with_ci)
        }
    }
}
df_mse <- df_mse |>
    mutate(
        train_condition = factor(train_condition, levels = TRAIN_CONDITIONS, labels = train_condition_strs_lst),
        generation_condition = factor(generation_condition, levels = GENERATION_CONDITIONS, labels = estimator_strs_lst)
    )
df_mse_agg <- df_mse_agg |>
    mutate(train_condition = factor(train_condition,
        levels = TRAIN_CONDITIONS,
        labels = train_condition_strs_lst
    ))
```

# Non-held-out pairs

```{r}
df_mse_nho <- data.frame()
for (train_cond in TRAIN_CONDITIONS) {
    df_cond <- df_non_held_out |>
        filter(train_condition == train_cond)
    for (dv in DVs) {
        se <- (df_cond[["fixed"]] - df_cond[[dv]])^2
        df_se_with_ci <- mean_cl_boot(se) |>
            rename(sqE = y, ci_lower = ymin, ci_upper = ymax) |>
            mutate(
                train_condition = train_cond,
                generation_condition = "fixed",
                dv = dv
            )
        df_mse_nho <- rbind(df_mse_nho, df_se_with_ci)
    }
}
df_mse_nho <- df_mse_nho |>
    mutate(
        train_condition = factor(train_condition, levels = TRAIN_CONDITIONS, labels = train_condition_strs_lst),
        generation_condition = factor(generation_condition, levels = GENERATION_CONDITIONS, labels = estimator_strs_lst)
    )
```

# Plots

## MSE with true conditional probabilities

```{r}
df_mse |>
    filter(dv == "true") %>%
    ggplot(
        data = .,
        mapping = aes(x = train_condition, y = sqE, fill = generation_condition)
    ) +
    geom_bar(stat = "identity", position = position_dodge(0.85), width = 0.8) +
    geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0, position = position_dodge(0.85)) +
    scale_y_continuous(limits = c(0, 0.15)) +
    labs(
        x = "Train condition",
        y = "Mean squared error",
        fill = "Estimator"
    ) +
    theme_tufte() +
    scale_fill_solarized() +
    theme(
        axis.text = element_text(size = 10),
        axis.title = element_text(size = 14),
        strip.text = element_text(size = 14),
        legend.text = element_text(size = 10),
        legend.title = element_text(size = 12)
    )
ggsave(here("figures/all_conditions_mse_plot.pdf"), bg = "white", width = 8, height = 4)
```

# MSE with marginal probabilities

```{r}
df_mse |>
    filter(dv == "marginal") %>%
    ggplot(
        data = .,
        mapping = aes(x = train_condition, y = sqE, fill = generation_condition)
    ) +
    geom_bar(stat = "identity", position = position_dodge(0.85), width = 0.8) +
    geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0, position = position_dodge(0.85), color = "black") +
    scale_y_continuous(limits = c(0, 0.15)) +
    labs(
        x = "Train condition",
        y = "Mean squared error with marginal",
        fill = "Estimator"
    ) +
    theme_tufte() +
    scale_fill_solarized() +
    theme(
        axis.text = element_text(size = 10),
        axis.title = element_text(size = 16),
        strip.text = element_text(size = 14),
        legend.text = element_text(size = 10),
        legend.title = element_text(size = 12)
    )
ggsave(here("figures/all_conditions_marginal_mse_bar_plot.pdf"), bg = "white", width = 8, height = 4)
```

# Create tables

First, we define a formatting function that rounds numeric values
```{r def_formatter}
# adapted from https://stackoverflow.com/a/12765046
dec_format <- function(val) {
    sub("^(-?)0.", "\\1.", sprintf("%.3f", val))
}
```

First, we'll make a table of MSE with true conditional probabilities.
```{r mse_table}
table_str <- ""
for (train_cond in TRAIN_CONDITIONS) {
    table_str <- paste(table_str, sprintf("& %s", train_condition_strs[train_cond]))
}
table_str <- paste(table_str, "\\\\\n")

for (generation_cond in GENERATION_CONDITIONS) {
    table_str <- paste(table_str, estimator_strs[generation_cond])
    for (train_cond in TRAIN_CONDITIONS) {
        row <- df_mse |>
            filter(train_condition == train_condition_strs[train_cond] & generation_condition == estimator_strs[generation_cond] & dv == "true")
        table_str <- paste(table_str, sprintf("& %s [%s, %s]", dec_format(row$sqE), dec_format(row$ci_lower), dec_format(row$ci_upper)))
    }
    table_str <- paste(table_str, "\\\\\n")
}
cat(table_str)
```

Next, a table of MSEs with the marginal probabilities of target variables.
```{r marginal_mse_table}
marginal_table_str <- ""
for (train_cond in TRAIN_CONDITIONS) {
    marginal_table_str <- paste(marginal_table_str, sprintf("& %s", train_condition_strs[train_cond]))
}
marginal_table_str <- paste(marginal_table_str, "\\\\\n")

for (generation_cond in GENERATION_CONDITIONS) {
    marginal_table_str <- paste(marginal_table_str, estimator_strs[generation_cond])
    for (train_cond in TRAIN_CONDITIONS) {
        row <- df_mse |>
            filter(train_condition == train_condition_strs[train_cond] & generation_condition == estimator_strs[generation_cond] & dv == "marginal")
        marginal_table_str <- paste(marginal_table_str, sprintf("& %s [%s, %s]", dec_format(row$sqE), dec_format(row$ci_lower), dec_format(row$ci_upper)))
    }
    marginal_table_str <- paste(marginal_table_str, "\\\\\n")
}
cat(marginal_table_str)
```

Finally, MSE on non-held-out pairs of variables.
```{r nho_mse_table}
nho_table_str <- ""
for (train_cond in TRAIN_CONDITIONS) {
    nho_table_str <- paste(nho_table_str, sprintf("& %s", train_condition_strs[train_cond]))
}
nho_table_str <- paste(nho_table_str, "\\\\\n")

for (dep_var in DVs) {
    nho_table_str <- paste(nho_table_str, dep_var)
    for (train_cond in TRAIN_CONDITIONS) {
        row <- df_mse_nho |>
            filter(train_condition == train_condition_strs[train_cond] & generation_condition == "direct prediction" & dv == dep_var)
        nho_table_str <- paste(nho_table_str, sprintf("& %s [%s, %s]", dec_format(row$sqE), dec_format(row$ci_lower), dec_format(row$ci_upper)))
    }
    nho_table_str <- paste(nho_table_str, "\\\\\n")
}

cat(nho_table_str)
```