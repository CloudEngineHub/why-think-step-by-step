---
title: "Analyze Free Generation"
author: "Anonymous"
format: html
editor: source
---

# Imports and constants

```{r imports}
library(plyr)
library(tidyverse)
library(ggthemes)
knitr::opts_knit$set(root.dir = "../..")
```

```{r constants}
TRAIN_CONDITIONS <- c("fully observed", "local", "wrong local")
COND_ABSTRACT_TO_CONCRETE <- list(
  "fully observed"=c("fully-observed-held-out"),
  "local"=c("local-joint-exp", "local-joint-zipf"),
  "wrong local"=c("wrong-local-joint-exp", "wrong-local-joint-zipf")
)
GENERATION_CONDITIONS <- c("fixed", "scaffolded", "free", "negative_scaffolded")
NET_IDXS <- c(2, 28, 33, 51, 6, 61, 64, 68, 81, 9)
DVs = c("true", "marginal")
model_strs <- c(
  "local-joint-exp"="geometric local joints",
  "fully-observed"="fully observed",
  "fully-observed-held-out"="fully observed",
  "local-joint-zipf"="Zipfian local joints",
  "non-local-zipf"="non-local (size based on Zipfian)",
  "wrong-local-joint-exp"="wrong local joint (exp)",
  "wrong-local-joint-zipf"="wrong local joint (zipf)"
)
```

# Load the data

This chunk of code reads in all the data, aggregating over both local and both wrong local conditions.

```{r read_and_merge}
df <- data.frame()
df_free_all <- data.frame()
for (net_idx in NET_IDXS) {
  df_true <- read_csv(sprintf("data/evaluation/true-probs/true-probabilities-net-%s.csv", 
                                  net_idx)) |>
                                  mutate(type = "true")

  for (train_condition in TRAIN_CONDITIONS) {
    for (conc_condition in COND_ABSTRACT_TO_CONCRETE[[train_condition]]) {
      df_free <- read_csv(sprintf("data/evaluation/free-gen-probabilities-%s-net-%s.csv", 
                                      conc_condition, net_idx)) |>
        mutate(
          type = "free",
          train_condition = train_condition,
          net_idx = net_idx
          )
      df_free_all <- rbind(df_free_all, df_free)

      df_all_test_conditions <- rbind.fill(df_true, df_free) |>
        pivot_wider(
          id_cols=c(target_var, condition_var, condition_val),
          names_from=type,
          values_from=prob
        ) |>
        merge(df_true |> select(-c(type, prob)),
          on=c(target_var, condition_var, condition_val)) |>
        merge(df_free |> select(target_var, condition_var, condition_val, n_intermediate),
          on=c(target_var, condition_var, condition_val)) |>
        mutate(
          net_idx = net_idx,
          prob_diff = abs(free - true),
          train_condition = train_condition
        )

      df_held_out <- df_all_test_conditions |>
        filter(!is.na(free))

      df <- rbind(df, df_held_out)   
    }
  }
}
```

# Plot number of variables generated and distance

```{r num_variables_vs_error}
df |>
  mutate(train_condition = factor(train_condition, levels=c("local", "wrong local", "fully observed"))) %>%
  ggplot(
      data=.,
      mapping=aes(x = n_intermediate, y = prob_diff, color = train_condition)
      ) +
    # facet_wrap(~train_condition) +
    geom_point(alpha=0.2, stroke=NA, size=3) +
    geom_smooth(method="lm") +
    labs(
        x="Number of intermediate variables",
        y="Distance from target probability",
        color="Training condition"
    ) +
    guides(color = guide_legend(override.aes = list(fill=NA, alpha=1, linetype=0, size=4))) +
    theme_tufte() +
    scale_color_solarized() +
    theme(
      text=element_text(size=18)
    )

ggsave("figures/n_intermediate_vs_dist.pdf", width=9, height=4, bg="white")
```

# How often does the generated set of variables d-separate the condition and target variables?

```{r how_often_d_sep}
df_free_all |>
  group_by(train_condition) |>
  summarize(prop_d_separating = mean(prop_d_separating, na.rm=T))
```
